generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id    Int     @id @default(autoincrement())
  name  String?
  avatarUrl  String?
  email String  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  userGroup  userGroup[]
  schedule Schedule[]
  memoirs Memoirs[]
  @@map("users") 
}
model Group {
  id    Int     @id @default(autoincrement())
  name  String?
  sigla String  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  userGroup  userGroup[]
  @@map("group") 
}
model userGroup{
  id    Int     @id @default(autoincrement())
  name  String?
  sigla String  @unique
  user   User @relation(fields: [userId], references: [id])
  userId Int
  group   Group @relation(fields: [groupId], references: [id])
  groupId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  @@map("userGroup") 
}
model Schedule{
  id    Int     @id @default(autoincrement())
  name  String?
  information String?
  date DateTime  
  user   User @relation(fields: [userId], references: [id])
  userId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  @@map("schedule") 
}
model Memoirs{
  id    Int     @id @default(autoincrement())
  name  String?
  information String?
  date DateTime  
  user   User @relation(fields: [userId], references: [id])
  userId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  memoiryImage MemoryImage[]
  @@map("memoirs") 
}
model MemoryImage{
  id    Int     @id @default(autoincrement())
  name  String?
  information String?
  date DateTime  
  memoirs   Memoirs @relation(fields: [memoryId], references: [id])
  memoryId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  @@map("memoryImage") 
}